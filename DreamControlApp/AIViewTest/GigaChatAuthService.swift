//
//  AIService.swift
//  DreamControlApp
//
//  Created by Ainur on 17.03.2025.
//
//
import Foundation

class GigaChatAuthService {
    // –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π client_id –∏ –≥–æ—Ç–æ–≤—ã–π base64(client_id:client_secret)
    private let clientID = "94d37597-b464-4895-a331-353712880d03"
    private let base64ClientAuth = "OTRkMzc1OTctYjQ2NC00ODk1LWEzMzEtMzUzNzEyODgwZDAzOjE3MzBkNmM4LWY0ZjctNDk5OC1iM2FlLTYzZDcxZGM2NDU4OA==" // —É–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ

    private let tokenURL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    func fetchAccessToken(completion: @escaping (String?) -> Void) {
        guard let url = URL(string: tokenURL) else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            completion(nil)
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"

        // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ñ–æ—Ä–º–∞—Ç x-www-form-urlencoded)
        let bodyString = "scope=GIGACHAT_API_PUB"
        request.httpBody = bodyString.data(using: .utf8)

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        request.setValue("Basic \(base64ClientAuth)", forHTTPHeaderField: "Authorization")
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: \(error)")
                completion(nil)
                return
            }

            if let httpResponse = response as? HTTPURLResponse {
                print("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: \(httpResponse.statusCode)")
            }

            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                completion(nil)
                return
            }

            let responseString = String(data: data, encoding: .utf8) ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
            print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")

            if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
               let accessToken = json["access_token"] as? String {
                print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                completion(accessToken)
            } else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞")
                completion(nil)
            }
        }.resume()
    }
}
